diff --git a/src/nsterm.m b/src/nsterm.m
index 30b73c2..4323d1d 100644
--- a/src/nsterm.m
+++ b/src/nsterm.m
@@ -23,6 +23,9 @@ Updated by Christian Limpach (chris@nice.ch)
 OpenStep/Rhapsody port by Scott Bender (sbender@harmony-ds.com)
 MacOSX/Aqua port by Christophe de Dinechin (descubes@earthlink.net)
 GNUstep port and post-20 update by Adrian Robert (arobert@cogsci.ucsd.edu)
+
+This is a modified version of Emacs-23.3 nsterm.m by Christos Chryssochoidis 
+												(c.chryssochoidis@gmail.com).
 */
 
 /* This should be the first include, as it may set up #defines affecting
@@ -4408,6 +4411,10 @@ ns_term_shutdown (int sig)
             code = fnKeysym;
         }
 
+	  if (code == 0 && [[theEvent characters] length] > 0) {
+		  code = [[theEvent characters] characterAtIndex: 0];
+	  }
+		
       /* are there modifiers? */
       emacs_event->modifiers = 0;
       flags = [theEvent modifierFlags];
@@ -4456,7 +4463,8 @@ ns_term_shutdown (int sig)
       if (flags & NSControlKeyMask)
           emacs_event->modifiers |=
             parse_solitary_modifier (ns_control_modifier);
-
+ 
+      // check if the Mac laptop's fn key is pressed
       if (flags & NS_FUNCTION_KEY_MASK && !fnKeysym)
           emacs_event->modifiers |=
             parse_solitary_modifier (ns_function_modifier);
@@ -4464,16 +4472,34 @@ ns_term_shutdown (int sig)
       if (!EQ (ns_right_alternate_modifier, Qleft)
           && ((flags & NSRightAlternateKeyMask) == NSRightAlternateKeyMask)) 
 	{
-	  emacs_event->modifiers |= parse_solitary_modifier
-            (ns_right_alternate_modifier);
+        if ((NILP (ns_right_alternate_modifier) || EQ (ns_right_alternate_modifier, Qnone))
+            && !fnKeysym)
+        {   /* accept pre-interp alt comb */
+            if ([[theEvent characters] length] > 0)
+                code = [[theEvent characters] characterAtIndex: 0];
+            /*HACK: clear lone shift modifier to stop next if from firing */
+            if (emacs_event->modifiers == shift_modifier)
+                emacs_event->modifiers = 0;
+        }
+        else
+            emacs_event->modifiers |=
+                parse_solitary_modifier (ns_right_alternate_modifier);
+                
 	}
       else if (flags & NSAlternateKeyMask) /* default = meta */
         {
-          if ((NILP (ns_alternate_modifier) || EQ (ns_alternate_modifier, Qnone))
+          if (((NILP (ns_alternate_modifier) || EQ (ns_alternate_modifier, Qnone))
               && !fnKeysym)
+			  || (flags & NS_FUNCTION_KEY_MASK && !fnKeysym))
             {   /* accept pre-interp alt comb */
               if ([[theEvent characters] length] > 0)
                 code = [[theEvent characters] characterAtIndex: 0];
+				
+              if (emacs_event->modifiers & 
+                  parse_solitary_modifier(ns_function_modifier))
+                  emacs_event->modifiers &= 
+                    ~parse_solitary_modifier(ns_function_modifier);
+				
               /*HACK: clear lone shift modifier to stop next if from firing */
               if (emacs_event->modifiers == shift_modifier)
                 emacs_event->modifiers = 0;
@@ -4488,8 +4514,10 @@ ns_term_shutdown (int sig)
              code, fnKeysym, flags, emacs_event->modifiers);
 
       /* if it was a function key or had modifiers, pass it directly to emacs */
-      if (fnKeysym || (emacs_event->modifiers
-                       && [[theEvent charactersIgnoringModifiers] length] > 0))
+      if (fnKeysym || 
+		  (emacs_event->modifiers && 
+		   ([[theEvent charactersIgnoringModifiers] length] > 0 ||
+			[[theEvent characters] length] > 0)))
 /*[[theEvent characters] length] */
         {
           emacs_event->kind = NON_ASCII_KEYSTROKE_EVENT;
